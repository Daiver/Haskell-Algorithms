import Data.ListisR200 :: [String] -> BoolisR200 s = (head s) == "R200"replaceChar :: Char -> Char -> Char -> CharreplaceChar whatC withC c = if c == whatC then withC else creplaceSymbols :: String -> StringreplaceSymbols s = map (replaceChar '|' ' ') (map (replaceChar ' ' '*') s)takeInterest :: [String] -> [Int] -> [String]takeInterest _ [] = []takeInterest ss (n:ns) = [ss !! n] ++ takeInterest ss nsinterestFields :: [String] -> [Int] -> [String]interestFields ss takeWhat | (maximum takeWhat) < length ss = takeInterest ss takeWhat						   | otherwise = undefinedmakeNewLine :: [String] -> StringmakeNewLine str = map (replaceChar ' ' '|') (unwords (interestFields str [7,8,9]))						   processLine :: String -> StringprocessLine s = if isR200 sInWords then map (replaceChar '*' ' ') (makeNewLine sInWords) else []				where sInWords = words . replaceSymbols $ sprocessString :: String -> [String]processString s = {-take 10-} (filter (\a -> a /= []) (map processLine (lines $ s)))main :: IO ()main = do	str <- readFile "merged.txt"	let processedStr = intercalate "\n" (processString $ str)	putStrLn processedStr	writeFile "processed.txt" processedStr